{"version":3,"sources":["SpaceX-logo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","itemContainer","background","margin","padding","missionName","fontSize","LaunchItem","props","classes","launch","mission_name","date","moment","launch_date_local","format","launchSuccess","launch_success","className","classNames","missionDate","to","flight_number","MissionKey","LAUNCES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","LAUNCH_QUERY","Launch","parseInt","match","params","variables","launch_year","rocket","rocket_name","rocket_id","rocket_type","client","ApolloClient","uri","App","style","width","src","logo","alt","target","rel","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.43c037a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceX-logo.21ab7959.jpg\";","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nconst useStyles = makeStyles({\n  itemContainer: {\n    background: \"rgb(69,69,69)\",\n    margin: \"5px\",\n    padding: \"5px\",\n  },\n  missionName: {\n    fontSize: \"30px\",\n  },\n});\n\nexport default function LaunchItem(props) {\n  const classes = useStyles();\n  const launch = props.launch;\n  const missionName = launch.mission_name;\n  const date = moment(launch.launch_date_local).format(\"LL\");\n  const launchSuccess = launch.launch_success;\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <div className={classes.missionName}>\n            Mission:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": launchSuccess,\n                \"text-danger\": !launchSuccess,\n              })}\n            >\n              {missionName}\n            </span>\n          </div>\n          <div className={classes.missionDate}>Date: {date}</div>\n        </div>\n        <div className=\"col-md-3\">\n          <Link\n            to={`/launch/${launch.flight_number}`}\n            className=\"btn btn-secondary\"\n          >\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Failure\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\nconst LAUNCES_QUERY = gql`\n  query Launchesquery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\nexport default function Launches() {\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">Launches</h1>\n      <MissionKey />\n      <Query query={LAUNCES_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) {\n            return <h4>Loading...</h4>;\n          }\n          if (error) console.log(error);\n          return (\n            <>\n              {data.launches.map((launch) => (\n                <LaunchItem key={launch.flight_number} launch={launch} />\n              ))}\n            </>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\nexport default function Launch(props) {\n  let flight_number = parseInt(props.match.params.flight_number);\n\n  return (\n    <>\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n        {({ loading, error, data }) => {\n          if (loading) {\n            return <h4>Loading...</h4>;\n          }\n          if (error) console.log(error);\n          const {\n            mission_name,\n            flight_number,\n            launch_year,\n            launch_success,\n            rocket: { rocket_name, rocket_id, rocket_type },\n          } = data.launch;\n          return (\n            <div className=\"\">\n              <h1 className=\"display-4 my-3\">\n                <span className=\"text-dark\">Mission:</span> {mission_name}\n              </h1>\n              <h4 className=\"mb-3\">Launch Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                  Flight Number: {flight_number}\n                </li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">\n                  Launch Success:{\" \"}\n                  <span\n                    className={classNames({\n                      \"text-success\": launch_success,\n                      \"text-danger\": !launch_success,\n                    })}\n                  >\n                    {launch_success ? \"Yes\" : \"No\"}\n                  </span>\n                </li>\n                <li className=\"list-group-item\">\n                  Flight Number: {flight_number}\n                </li>\n              </ul>\n              <h4 className=\"my-3\">Rocket Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket Id: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n              </ul>\n              <hr />\n              <Link to=\"/\" className=\"btn btn-secondary\">\n                Back\n              </Link>\n            </div>\n          );\n        }}\n      </Query>\n    </>\n  );\n}\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport logo from \"./SpaceX-logo.jpg\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <div style={{ margin: \"auto\", width: \"fit-content\" }}>\n            <img src={logo} alt=\"\" width=\"300px\" />\n          </div>\n          <div>\n            Built with Apollo By{\" \"}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/Mitchell8210\"\n            >\n              Mitchell Rhoads\n            </a>\n          </div>\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}